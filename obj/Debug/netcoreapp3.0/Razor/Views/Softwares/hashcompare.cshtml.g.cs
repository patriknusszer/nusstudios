#pragma checksum "/Users/patrik.nusszer/nusstudios/Views/Softwares/hashcompare.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5b29e490c2811363eda3b575e17548c225e06dea"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Softwares_hashcompare), @"mvc.1.0.view", @"/Views/Softwares/hashcompare.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/patrik.nusszer/nusstudios/Views/_ViewImports.cshtml"
using Nusstudios;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b29e490c2811363eda3b575e17548c225e06dea", @"/Views/Softwares/hashcompare.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d2753723ec3b7f1744cac33670045c6f2e6d4ce3", @"/Views/_ViewImports.cshtml")]
    public class Views_Softwares_hashcompare : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "/Users/patrik.nusszer/nusstudios/Views/Softwares/hashcompare.cshtml"
  
    ViewData["Title"] = "hashcompare";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("keywords", async() => {
                WriteLiteral("\r\n    <meta name=\"keywords\" content=\"has tree comparison, directory hash comparison, hash comparer\" />\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("topheading", async() => {
                WriteLiteral("\r\n    hashcompare\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("subheading", async() => {
                WriteLiteral("\r\n    hashtree creation and comparison tool\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("description", async() => {
                WriteLiteral(@"
    Hashcompare is hash tree creator and comparison utility, which
    can compare the hash trees of 2 directories. You can also create a hash tree JSON
    based on a directory to save to your disk, and later you can check the directory
    with that hash tree JSON. And of course, you can also choose to compare 2 hash tree JSONs.
    The hashing algorithms available are: SHA-1, SHA-2 256 bit, SHA-2 384 bit, SHA-2 512 bit, MD5,
    Keccak 224 bit, Keccak 256 bit, Keccak 384 bit, Keccak 512 bit, SHA-3 224 bit, SHA-3 256 bit,
    SHA-3 384 bit, SHA-3 512 bit. SHA-1, SHA-2 series, and MD5 are barely rewritten .NET reference implementations,
    Keccak series and SHA-3 series are from an archived CodePlex project knowing Keccak,
    and rewritten to support SHA-3 (you choose to use the standard SHA-3 padding, or the original Keccak padding).
    The comparison does a pretty good job. There are 3 main entries: the files with common relative path (""common_path""),
    files only present in one and files ");
                WriteLiteral(@"present in the other directory (""only_in_1"", ""only_in_2""). In the ""common_path"" section you can see the files listed in 4 subcategories: ""accessible"", ""inaccessible_in_1"", ""inaccessible_in_2"", and ""inaccessible_in_both"".
    Of course the hashes are only compared if the files with common relative path are accessible in both directories.
    Therefore ""accessible"" section inside common path has 2 subcategories: the files at that relative path (relative to the
    first and second directory) have different hashes or identical hashes (""same_hash"", ""different_hash"").
    Both ""only_in_1"" and ""only_in_2"" have ""accessible"" and ""inaccessible"" subcategories.
    The project is built with .NET Core so it is cross platform.
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("source", async() => {
                WriteLiteral("\r\n    href=\"https://mega.nz/#!SA5wHArD!ng-C4Zw1KpxwywdcTXD6-ADR1sk0-3N7pEWvUntN9YM\" target=\"_blank\"\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("release", async() => {
                WriteLiteral("\r\n    href=\"https://mega.nz/#!eF5GWSaD!oqNd7tWrqzSJ9RQIH7eJf81nSNyDtTSen8_eKoW3NCs\" target=\"_blank\"\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("projectspecs", async() => {
                WriteLiteral("\r\n    Windows console application. C#, .NET Core 2.1.\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
