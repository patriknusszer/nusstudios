#pragma checksum "/Users/patrik.nusszer/nusstudios/Views/Articles/high_level_languages_behind_the_scenes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "98d4410f6ac5354ac8c97fc99b84cf0ab66ba2a0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Articles_high_level_languages_behind_the_scenes), @"mvc.1.0.view", @"/Views/Articles/high_level_languages_behind_the_scenes.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/patrik.nusszer/nusstudios/Views/_ViewImports.cshtml"
using Nusstudios;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"98d4410f6ac5354ac8c97fc99b84cf0ab66ba2a0", @"/Views/Articles/high_level_languages_behind_the_scenes.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d2753723ec3b7f1744cac33670045c6f2e6d4ce3", @"/Views/_ViewImports.cshtml")]
    public class Views_Articles_high_level_languages_behind_the_scenes : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            DefineSection("keywords", async() => {
                WriteLiteral(@"
	<meta name=""keywords"" content=""high level languages, behind the scenes, automatic memory management"" />
	<meta name=""keywords"" content=""memory management in C and C++, smart pointers, std::unique_ptr, std::shared_ptr"" />
	<meta name=""keywords"" content=""managed types, reference types, runtime polymorphism"" />
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("topheading", async() => {
                WriteLiteral("\r\n    High level languages\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("subheading", async() => {
                WriteLiteral("\r\n    Behind the scenes\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("description", async() => {
                WriteLiteral(@"
	What's happening in high level languages behind the scenes?<br>
	<br>
	Have you ever wondered why instances of classes in high level languages
	are referred to as managed types?<br>
	<br>
	I have and did not find the solution until I started looking into C++.<br>
	<br>
	Being a reference or managed type means it its behaviour is that of a pointer's.
	<br>
	Its value is an address. It's not the object itself.
	Whenever you modify a property of the managed type the pointer gets dereferenced
	and the access takes place.<br>
	<br>
	That is why you can pass a managed variable to a function as parameter
	and see that any modification done by the function remains, because only the address
	was copied and not the object itself.<br>
	<br>
	But why is it happening? The answer is not hard.<br>
	<br>
	The decision was made with runtime polymorphism in mind.<br>
	<br>
	It allows a variable to hold any of its subtypes.
	That is a very abstract and high level statement actually :)<br>
	<br>
	When ");
                WriteLiteral(@"space is allocated for an object in the RAM, we must know its size
	in advance, at compile time.<br>
	<br>
	Now lets say some class has multiple different subclasses each having different
	allocation sizes.<br>
	<br>
	But when we declare a variable which has subtypes, we
	can not tell what should its allocation size be because it can
	change during runtime.<br>
	<br>
	So the solution is to allocate the size of a memory address (pointer) because
	it is known at compile time, and let it point to any of the objects
	which are subtypes of the newly declared variable.<br>
	<br>
	That is why in C++ if you want Liskov substitution principle,
	you need to declare the variable intended to be substitutable
	as a pointer to an object of its type, but it can point to any object
	whose type is its subtype.<br>
	<br>
	Shape *s = new Traingle();<br>
	s = new Quadrilateral();<br>
	s = new Square();<br>
	<br>
	Shape shape = Shape(); // This is okay<br>
	shape = Triangle(); // This will definitely not c");
                WriteLiteral(@"ompile<br>
	<br>
	You might have also heard that C and C++ does not have
	automatic memory management.<br>
	<br>
	That is only partially true.<br>
	Variables which are declared in a given scope will automatically
	get wiped out of memory when they get out of scope, even in case
	of C and C++, which means that the given block-scope finished executing.<br>
	<br>
	These variables are allocated on the stack.<br>
	Variables allocated on the stack are inserted sequentially into the memory,
	just after the previously allocated variable.
	These variables are partially automatically managed by the CPU,
	so when the the declared variables get out of scope they are
	wiped out of memory automatically.<br>
	<br>
	But we can also allocate continuous RAM memory pieces outside the stack.
	If we do so, this piece of memory will get deallocated either by
	the developer itself when decides to, or when the app finished execution completely.<br>
	<br>
	This latter one is what we call memory management in C an");
                WriteLiteral(@"d C++.<br>
	<br>
	The question arises, how memory allocated outside the stack is managed by
	high level languages automatically?<br>
	<br>
	Well, the goal is to free up the given memory segment when it is no
	longer pointed to by any pointer.<br>
	<br>
	So when in C# for example you do:<br>
	<br>
	Shape s = new Triangle();<br>
	<br>
	In C++ you would do:<br>
	<br>
	Shape *s = new Triangle();<br>
	<br>
	Here ""new Triangle()"" issues the allocation of a new copy of our Triangle
	blueprint class outside the stack, so it is not a perfect translation.<br>
	<br>
	If you do this in C#:<br>
	<br>
	s = null;<br>
	<br>
	This will free the memory allocated for Triangle automatically
	given no other pointers point to it.<br>
	<br>
	However if you do the same in C++ or C:<br>
	<br>
	s = nullptr;<br>
	<br>
	The memory segment will not be deallocated. You have to do instead:<br>
	<br>
	delete s;<br>
	<br>
	This basically translates to calling the destructor of our Triangle
	object and the s");
                WriteLiteral(@"imple C method ""free"" will get called:<br>
	<br>
	free(s);<br>
	<br>
	Now if we wanted to make an exact translation of our C# code to C++,
	we would want to use that thing which is called ""C++ smart pointer"".<br>
	<br>
	std::shared_ptr is a C++ abstraction over pointers based on reference counting.
	That means the number of references to a memory segment allocated outside of the stack
	is held account of and managed by instances if it.<br>
	<br>
	std::unique_ptr is also a C++ abstraction over pointers and it will deallocate
	the given memory segment automatically when gets out of scope.
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("btnname", async() => {
                WriteLiteral("\r\n\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("url", async() => {
                WriteLiteral("\r\n\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
