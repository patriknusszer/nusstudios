#pragma checksum "/Users/patrik.nusszer/nusstudios/Views/Articles/graph_api_and_x_instagram_gis.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d3737368f4530e60264f241d3e7f51bce5684077"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Articles_graph_api_and_x_instagram_gis), @"mvc.1.0.view", @"/Views/Articles/graph_api_and_x_instagram_gis.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/patrik.nusszer/nusstudios/Views/_ViewImports.cshtml"
using Nusstudios;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3737368f4530e60264f241d3e7f51bce5684077", @"/Views/Articles/graph_api_and_x_instagram_gis.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d2753723ec3b7f1744cac33670045c6f2e6d4ce3", @"/Views/_ViewImports.cshtml")]
    public class Views_Articles_graph_api_and_x_instagram_gis : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            DefineSection("keywords", async() => {
                WriteLiteral("\r\n    <meta name=\"keywords\" content=\"Graph API, Instagram downloader, Instagram saver, Instagram archiver\" />\r\n    <meta name=\"keywords\" content=\"X-Instagram-GIS, rhxgis\" />\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("topheading", async() => {
                WriteLiteral("\r\n    Graph API and X-Instagram-GIS\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("subheading", async() => {
                WriteLiteral("\r\n    In-depth information\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("description", async() => {
                WriteLiteral(@"
    This article will go into details regarding how acquisition of Instagram media content works.<br>
    We will discuss how to iterate through a user's profile posts from the latest to oldest.<br>
    If you are a developer you might already be familiar with Graph API, which is the all-purpose
    Instagram API, but you are officially not meant to get your hands on user's media.<br>
    The Graph API communicates with JSON objects, and the properties that belong to 1 post are held by
    a child JSON named ""node"", but it is not always equivalent to a post. And these nodes are oftenly
    held inside a JSON array called ""edges"", which in this case is an array of posts.<br>
    A ""node"" has a property called ""__typename"", which maps to a string that is either ""GraphImage"", ""GraphVideo"" or ""GraphSidecar"".<br>
    Each type has a ""display_url""-named child, the image you see when you are just browsing posts.<br>
    In the case of ""GraphImage"" it is the original photo, in case of ""GraphSidecar"" it is ");
                WriteLiteral(@"the first photo,
    and in case of ""GraphVideo"" it is a preview image. If it is a video, the real footage's URL is ""video_url"".<br>
    A ""GraphSidecar"" is a collection of ordered images. The images that belong to the sidecar are also described by ""node""
    objects, with ""__typename"" set to ""GraphImage"" and are also collectively held by an ""edges"" array,
    which is the child of a ""edge_sidecar_to_children""-named JSON object, which is the child of the sidecar node.<br>
    <br>
    And how does an API request look like? Each Graph API request comes with 2 parameters:<br>
    the ""query_hash"" which is the unique identifier of the type of request, and ""variables"",
    whose value is an URL encoded JSON containing the request-specific arguments.<br>
    If you wish to iterate through the posts of a user, you need to specify ""id"", ""first"" and ""after""
    in the ""variables"" JSON object.<br>
    The ""id"" is the user's numeric identifier, not the alphanumeric one you can see in the user's Instagram pro");
                WriteLiteral(@"file page URL.<br>
    Theoretically, the user's posts are organized into an ordered array, where a post is followed by
    another post that is the least old post that is older than one it follows. (In simple words, the posts of the user
    are organized by age inside the array.) And you can advance from a post to the next one as such by requesting
    subsequent posts from it from a given index/position, reading towards the older posts. With ""first"" and ""after"" arguments you tell Graph API
    that you want to request the number ""first"" posts just after the post at the position ""after"".<br>
    And the API tells you whether there are more posts after the last requested post with a boolean called ""has_next_page"".<br>
    And then all you need to know is the position of the last requested post, which is specified in ""end_cursor"".<br>
    Isn't it clever?<br>
    Now you certainly think about, hey, why not request all posts at once? Because there is a maximum of 50 posts
    that can be requested.<b");
                WriteLiteral(@"r>
    Also, when requesting from the first post, you do not specify ""after"". There is nothing to specify.<br>
    <br>
    Let's talk about the X-Instagram-GIS request header field.<br>
    You will need it for any Graph API request.<br>
    It was introduced due to security considerations.<br>
    It is a calculation and if it does not match the value calculated by Instagram servers
    your request will be rejected.<br>
    You need to concatenate a value called ""rhx_gis"" and the non-URL encoded ""variables"" JSON with character "":"",
    convert it to a byte array using the ""UTF-8"" character set, calculate the byte array's MD5
    hash, and take the message digest's hexadecimal string representation.<br>
    That is what you need to assign to ""X-Instagram-GIS"".<br>
    <br>
    And the remaining bits...<br>
    You will need to obtain ""id"", ""rhx_gis"", the ""query_hash"" of the request.<br>
    You need to make a request to the profile page of the user. The source will contain an embedded JSON th");
                WriteLiteral(@"at you can
    extract using regular expressions. The JSON will contain the user's numerical ""id"" and ""rhx_gis"".<br>
    It is possible that ""rhx_gis"" is absent, in that case it is defined as an empty string.<br>
    This page source also contains a JavaScript, whose source needs to be requested as well.<br>
    And you can extract the ""query_hash"" using a regular expression.<br>
    <br>
    If you would like to access the media of a private Instagram account, you need to programatically log
    into an account who requested follow consent to the account and was accepted.<br>
    Given a working username and password combination, you can log into Instagram
    by first requesting the login page HTML document, from which you can extract a JSON
    object with the exact same regular expression used to extract the JSON from the profile page HTML.<br>
    From that JSON you take the value of keys ""rollout_hash"" and ""csrf_token"".<br>
    Then you send a formal POST request to an URL. In that  you need");
                WriteLiteral(@" to set the ""X-Instagram-AJAX""
    request header field's value to ""rollout_hash"" and set the ""X-CSRFToken"" request header field's
    value to ""csrf_token"". The post data has x-www-form-url-encoded format. You need to specify
    key and value pairs. The array of key-value pairs are concatenated by character ""&"". A single pair
    of a key and value is concatenated by character ""="".<br>
    There are 4 keys you need to specify: ""username"", ""password"", ""queryParams"" and ""optIntoOneTap"".<br>
    The former 2 are straightforward. ""queryParams"" has a value of an URL encoded JSON in which you specify
    from where the user navigated to the login page. Encode a blank JSON object (""{}"") to tell the server
    you did not navigate from another Instagram page to the login page.<br>
    I have really no idea what the function of ""optIntoOneTap"" is. It is a boolean value, and I
    was just fine by setting it to ""false"".<br>
    A successful request is indicated by a 200 response code, otherwise it is most ");
                WriteLiteral(@"probably 403, unauthorized access.<br>
    Now what you need to look at is the collection of ""Set-Cookie"" response header fields' values that come
    with the response to our request.<br>
    Whatever cookies it wants you to set, you will only need to look for 2: ""ds_user_id"" and ""sessionid"".<br>
    These are those 2 cookies upon which Instagram detects whether you can access something that
    requires authorization, for example, Graph API requests for the media of private Instagram accounts.<br>
    For details on which regexes were used to extract the right script's source, the embedded JSON,
    which are the exact JSON paths to the essential values see debug info below, you will find
    a sample profile page source, sample script, the extracted JSON, example Graph API request,
    example Graph API response. I did not include login details here either, but you can always
    look at the original source code of Instarchiver.
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("btnname", async() => {
                WriteLiteral("\r\n    Debug info\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("url", async() => {
                WriteLiteral("\r\n    href=\"https://mega.nz/#!mUBHnCyT!LcmPhLiGqTdZPD-tp236-UsJJPFOJ-BPwPA5TZCnnXE\" target=\"_blank\"\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
